#!/bin/bash
# Function for formatting human input frequencies into the hamlib needed format
# We assume a base of MHz, therefore we multiply with 1000000
# We switch eventually commas with decimal points, using SED.
re_format_frequency() {
  local frequency=$1
  frequency=$(echo "$frequency * 1000000 /1" | sed 's/,/./g' | bc)
  echo $frequency
}

# Function for formatting frequencies output more human friendly
format_frequency() {
  local frequency=$1
  local power=""

  if (( frequency >= 1000000000 )); then
    frequency=$(echo "scale=9; $frequency / 1000000000" | bc)
    power="GHz"
  elif (( frequency >= 1000000 )); then
    frequency=$(echo "scale=6; $frequency / 1000000" | bc)
    power="MHz"
  elif (( frequency >= 1000 )); then
    frequency=$(echo "scale=3; $frequency / 1000" | bc)
    power="KHz"
  else
    power="hz"
  fi
# Output Frequency, remove trailing 0s or the whole decimal point if needed and add the power in Hz.
  echo "$(echo $frequency | sed -E 's/\.?0+$//; s/(\.[0-9]*[1-9])0+$/\1/') $power"
}

function multiply_and_format { # expects a number and its multiplier. Returns the Number without the decimal point.
  local number=$1
  local multiplier=$2
  local result=$(echo "$number * $multiplier" | bc)
  local formatted_result=$(echo $result | sed 's/\.0*$//')
  echo $formatted_result
}

# ${#array[@]} to determine an arrays length in elements.
# Use this to restrict a midi controllers range to the given range of an options array for example.
function apply_modulo {
  local value=$1
  local max_value=$2
  local result=$((value % max_value))
  echo $result
}

# Use this for example, if you have a long fader path and a little list of possible values. The overall maximum fader value is divided by the possible options to create zones. Then, each fader value is checked, in which zone it is.
function fader_to_zones {
  local fader_value=$1
  local num_states=$2
  local zone_size=$((128 / num_states)) # we say, the fader has 128 possible values, maybe this changes later.
  local state=$((fader_value / zone_size))
  echo $state
}

function get_current_mode {
# Return only the mode name without the passband
  echo $(rigctl -m 2 -r localhost:$port m | head -n 1)
}

# Function for use with the transceiver functions.
# Convert the status_last_function into human friendly on of texts
humanize_status() {
  local status=$1
  echo "$status" | sed -e 's/0/off/g' -e 's/1/on/g'
}

show_help() {
  echo "Usage: $0 [OPTIONS]"
  echo
  echo "Options:"
  echo "  -C, --config-file path_to_alternative_configuration/file.conf"
  echo "  -h, --help        Show this help"
}


