# Build the functions list by querying the backend for supported functions. 
if [[ ! -v functions ]]; then
  functions=($(rigctl -m 2 -r $host:$port U ?))
fi

function_select_entry() {
# Do not show the 0 index, cause its not a function, its the go back feature.
# Show number, name and status of selected function
  local funcstat=$(rigctl -m 2 -r $host:$port u ${functions[$1]})
  echo "${functions[$1]} ($(humanize_status $funcstat))"
}

function_select_handler() {
# toggle function on or off, according to its current status:
  if [[ $(rigctl -m 2 -r $host:$port u ${functions[$1]}) == 0 ]]; then
    rigctl -m 2 -r $host:$port U ${functions[$1]} 1
  else
    rigctl -m 2 -r $host:$port U ${functions[$1]} 0
  fi
# Show function status
  local funcstat=$(rigctl -m 2 -r $host:$port u ${functions[$1]})
  echo "${functions[$1]} is $(humanize_status $funcstat)"
  return 0
}

if [[ $1 ]]; then #Triggered with parameter
# We assume that the user selects the desired function with a rotary encoder.
# So we put name and status of the function in charge into two variables
# What ever kind of midi controller the user has: These variables can be used to toggle the function on or off. Due to the sourcing natureof the whole project, the variables are available from everywhere.
  if validate_midi_value $@ functions func_midi_result; then
    last_function=${functions[$func_midi_result]}
    status_last_function=$(rigctl -m 2 -r $host:$port u ${last_function})
    echo "$last_function is $(humanize_status "$status_last_function")"
  fi
else # Called from keyboard, show functions list and ask for selection.
  show_menu "Functions:" functions 'Function?: ' function_select_handler function_select_entry
fi
