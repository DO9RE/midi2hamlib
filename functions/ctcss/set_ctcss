# Generate CTCSS Range from the given models --caps-dump output
# Remove the decimal points, because the System needs every value as an integer.
if [[ ! -v ctcss_range ]] ; then
  ctcss_range=(0 $(rigctl -m "$model" --dump-caps | grep "CTCSS: " | sed 's/\(CTCSS: *\)\|\( Hz.*$\)\|\.//g'))
# echo "${#ctcss_range[@]} CTCSS tones: ${ctcss_range[@]}"
fi
# Important! Not every transceiver supports querying.
if [[ $1 ]]; then # Its been invoced by a MIDI action:
  if validate_midi_value "$@" ctcss_range ctcss_midi_result; then
    rigctl -m 2 -r "$host:$port" C "${ctcss_range[$ctcss_midi_result]}"
  else
    return 0
  fi
else # Triggered from keyboard
  read -rp 'Enter CTCSS-Tone: ' ctcss
  ctcss="${ctcss//[^0-9]/}"
  # Check if this is a valid CTCSS tone.
  # Works because CTCSS tones do not contain spaces.
  # Quoting rhs of ~= is OK here, we do not need regexp matching.
  # shellcheck disable=SC2076
  if [[ " ${ctcss_range[*]} " =~ " ${ctcss} " ]]; then
    rigctl -m 2 -r "$host:$port" C "${ctcss}"
  else
    echo -n "Invalid CTCSS tone. CTCSS is still "
  fi
fi
# Format the output as decimal with one position behind the decimal point
ctcss=$(rigctl -m 2 -r "$host:$port" c)
humanize_ctcss "$ctcss"
