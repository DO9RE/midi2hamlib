#!/bin/bash
midi_mapper() {
  echo "New MIDI event detected"
  if [[ $type == "Note" ]]; then
    event="$device note_on $channel $note $velocity"
  elif [[ $type == "Control" ]]; then
    event="$device control $channel $controller $value"
  fi
  # Map the event to a dummy function
  echo "$event dummy_function" >> $midi_mapping_file
  # delete midi_mapper_on file
  rm $basedir/midi/midi_mapper_on
  # Exit MIDI reader to reload mapping file at restart
  exit
}

# Build Port list from device names.
# This replaces device names by their corresponding port numbers right in the array:
for i in "${!midi_devices[@]}"; do
  device_port=$(aseqdump -l | grep "${midi_devices[$i]}" | awk '{print $1}' | head -n 1)
  midi_devices[$i]=$device_port
done

# Convert MIDI ports into a comma-separated list for ASEQDUMP
ports=$(IFS=,; echo "${midi_devices[*]}")

# Read MIDI mapping from file into memory
midi_mapping=$(cat "$midi_mapping_file")
# Start aseqdump and process the output
stdbuf -oL aseqdump -p "$ports" | while read -r line; do
  unset source type channel controller value on_off note velocity
  # Remove commas and extract all needed values
  eval $(echo "$line" | awk '
  {
    gsub(",", "");  # remove commas
    source = $1;
    type = $2;
    channel = $4;
    if (type == "Control") {
      controller = $6;
      value = $8;
      printf("source=\"%s\" type=\"%s\" channel=\"%s\" controller=\"%s\" value=\"%s\" ", source, type, channel, controller, value);
    } else if (type == "Note") {
      on_off = $3;
      note = $6;
      velocity = $8;
      printf("source=\"%s\" type=\"%s\" channel=\"%s\" on_off=\"%s\" note=\"%s\" velocity=\"%s\" ", source, type, channel, on_off, note, velocity);
    } else {
      printf("source=\"%s\" type=\"%s\" channel=\"%s\" ", source, type, channel);
    }
  }')

  # Map source to device
  device=""
  for i in "${!midi_devices[@]}"; do
    if [[ "${midi_devices[$i]}" == "$source" ]]; then
      device=$i
      break
    fi
  done

  # Search MIDI map for the event definition and execute the corresponding function
  unset mapping
  if [[ $type == "Note" && $on_off == "on" ]]; then
    # Velocity is currently not used.
    mapping=$(echo "$midi_mapping" | awk -v device=$device -v channel=$channel -v note=$note '$1 == device && $3 == channel && $4 == note && $2 == "note_on" {print $6}')
    if [[ -n "$mapping" ]]; then
#     echo "note_on $note"
      source $funcdir/$mapping
    fi
  elif [[ $type == "Note" && $on_off == "off" ]]; then
    # Velocity is currently not used.
    mapping=$(echo "$midi_mapping" | awk -v device=$device -v channel=$channel -v note=$note '$1 == device && $3 == channel && $4 == note && $2 == "note_off" {print $6}')
    if [[ -n "$mapping" ]]; then
#     echo "note_off $note"
      source $funcdir/$mapping
    fi
  elif [[ $type == "Control" ]]; then
    mapping=$(echo "$midi_mapping" | awk -v device=$device -v channel=$channel -v controller=$controller -v value=$value '$1 == device && $3 == channel && $4 == controller && $2 == "control" && ($5=="n" || $5==value) {print $6}')
    if [[ -n "$mapping" ]]; then
#     echo "control $controller $value"
      source $funcdir/$mapping $value
    fi
#   source $funcdir/$(echo "$midi_mapping" | awk -v device=$device -v controller=$controller '$1 == device && $4 == controller {print $6}') $value
  fi
  # run midi mapper function if there is no mapping for the current event, also its no note off and the midi_mapper_on file is present
  if [[ -f $basedir/midi/midi_mapper_on && -z "$mapping" && $on_off != "off" ]]; then
    midi_mapper
  fi
done

