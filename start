#!/bin/bash
# We have a few background processes running, exit these when CTRL+C is pressed
trap 'cleanup' INT TERM

cleanup() {
  echo "Cleaning up background processes..."
  pkill -P $$
  echo "Script terminated. All background processes have been stopped."
  exit 1
}

setleds +num
default_config_file="./settings/settings.conf"
funcdir="$(pwd)/functions"
source $funcdir/helper_functions
# Process command line arguments
config_file=$default_config_file
while [[ $# -gt 0 ]]; do
  case $1 in
    -c|--config-file)
      config_file="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      exit 1
      ;;
  esac
done

# Check, if config file exists:
if [[ ! -f "$config_file" ]]; then
  echo "Error! Configuration file '$config_file' does not exist."
  exit 1
else
  source $config_file
fi
# Use MIDI devices?
if [[ $use_midi_device == "TRUE" ]]; then
  source $basedir/midi/reader &
fi

  rigctld -m $model -t $port &
# rigctld -m $model -r $device_path -t $port &

declare -a menu_options
declare -a menu_numbers

# clear
echo -e "$greeting \n
Use 0 to return from a menu."
cd $menudir

# Function for Reading Folder Scripts and building Menu 
function show_main_menu {
# Resetting the menu arrays with every new menu to display
  unset menu_options
  unset menu_numbers
# Display the Menu Name from its name file
  cat $(pwd)/name
# Walk through the menu folder and build the menu from line 2 and 3 of each file
  menu_number=0
  for file in $(ls | sort) ; do
    if [[ -f $file && ! $file == "name" ]]; then
      menu_number=$(( ${menu_number}+1 ))
      menu_name=$(sed -n '1p' "$file" | sed 's/# *//')
      eval "menu_name=\"$menu_name\""
      menu_numbers["$menu_number"]="$menu_name"
      menu_options["$menu_number"]="$file"
      max_menu_number=$menu_number
    fi
  done

  for key in ${!menu_numbers[@]} ; do
    echo "$key: ${menu_numbers[$key]}"
  done
}

while true; do
  show_main_menu
  if ! read_and_validate 'And now? ' $max_menu_number selection; then continue; fi

  if [[ $selection -eq "0" ]]; then
    if [[ $(pwd) == "$menudir" ]]; then
      echo "Already at top level."
    elif [[ $(pwd) == "$basedir/menus/options" ]]; then
      cd $menudir
    else
      cd ..
    fi
  elif [[ ${menu_options[$selection]} ]]; then
    source ${menu_options[$selection]}
  else
    echo "Not a valid option"
  fi
done

