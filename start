#!/bin/bash
# We have a few background processes running, exit these when CTRL+C is pressed
trap 'cleanup' INT TERM

cleanup() {
  echo "Cleaning up background processes..."
  pkill -P $$
  echo "Script terminated. All background processes have been stopped."
  exit 1
}

default_config_file="./settings/settings.conf"
funcdir="$(pwd)/functions"
source $funcdir/helper_functions
# Process command line arguments
config_file=$default_config_file
while [[ $# -gt 0 ]]; do
  case $1 in
    -c|--config-file)
      config_file="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      exit 1
      ;;
  esac
done

# Check, if config file exists:
if [[ ! -f "$config_file" ]]; then
  echo "Error! Configuration file '$config_file' does not exist."
  exit 1
else
  source $config_file
fi
# Use MIDI devices?
if [[ $use_midi_device == "TRUE" ]]; then
  source $basedir/midi/reader &
fi

# Process rigctld options
declare -a rigctldoptions
if [[ -v model ]]; then rigctldoptions+=(-m "$model"); fi
if [[ -v port ]]; then rigctldoptions+=(-t "$port"); fi
if [[ -v device_path ]]; then rigctldoptions+=(-r "$device_path"); fi
if [[ -v serial_speed ]]; then rigctldoptions+=(-s "$serial_speed"); fi
rigctld "${rigctldoptions[@]}" &
unset rigctldoptions

# switch numpad to numbers
setleds +num

declare -a file_menu_entries
declare -a file_menu_actions

# clear
echo -e "$greeting \n
Use 0 to return from a menu."
cd $menudir

# Function for Reading Folder Scripts and building Menu 
build_menu_from_files() {
# Resetting the menu arrays with every new menu to display
  unset file_menu_entries
  unset file_menu_actions
# Display the Menu Name from its name file
  file_menu_title=$(cat $(pwd)/name)
# Walk through the menu folder and build the menu from line 2 and 3 of each file
  local menu_name
  local file
  local menu_number=0
  for file in $(ls | sort) ; do
    if [[ -f $file && ! $file == "name" ]]; then
      menu_name=$(sed -n '1p' "$file" | sed 's/# *//')
      eval "menu_name=\"$menu_name\""
      file_menu_entries["$menu_number"]="$menu_name"
      file_menu_actions["$menu_number"]="$file"
      menu_number=$(( ${menu_number}+1 ))
    fi
  done
}

file_menu_select() {
  local cmd=${file_menu_actions[$1]}
  shift $# # Clear all positional parameters to avoid passing them further on.
  source $cmd
  build_menu_from_files
  return 0
}

build_menu_from_files
while true; do
  show_menu --vartitle file_menu_title file_menu_entries 'And now? ' file_menu_select
# Menu was left with 0, so go up one level if possible.
  if [[ $(pwd) == "$menudir" ]]; then
    echo "Already at top level."
  elif [[ $(pwd) == "$basedir/menus/options" ]]; then
    cd $menudir
    build_menu_from_files
  else
    cd ..
    build_menu_from_files
  fi
done

